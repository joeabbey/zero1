searchState.loadedDescShard("z1_cli", 0, "Z1 CLI library components.\nComprehensive diagnostic system with warnings, …\nPretty error printing with source context and colors.\nZ1 cell compilation orchestration.\nProvenance CLI commands.\nPath to the canonical benchmark cell.\nContinue running even if a command fails.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDestination JSON file for benchmark results.\nCompilation options.\nCompilation target language.\nOrchestrate the full compilation pipeline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a new Ed25519 keypair\nDisplay a provenance chain in human-readable format\nVerify the integrity of a provenance chain\nHandle the z1prov keygen command.\nHandle the z1prov log command.\nHandle the z1prov verify command.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath to the provenance chain file (.z1p)\nPath to the provenance chain file (.z1p)\nOptional path to JSON file mapping signer IDs to public …\nOptional output path for the keypair (default: prints to …\nA single diagnostic message (error, warning, info, or …\nCollects diagnostics from multiple sources.\nConfiguration for diagnostic output.\nDiagnostic severity level.\nWarning level configuration.\nAdd a diagnostic to the collection.\nAdd an error diagnostic.\nAdd an info diagnostic.\nAdd a warning diagnostic.\nGroup diagnostics by file.\nGet the color for this diagnostic level.\nGet all diagnostics.\nCreate a new error diagnostic.\nGet error count.\nFilter diagnostics by level.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an EffectError to a Diagnostic with suggestion.\nConvert a ParseError to a Diagnostic.\nConvert a TypeError to a Diagnostic.\nCheck if there are any errors.\nCreate a new info diagnostic.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutput as JSON.\nCompute Levenshtein distance between two strings for fuzzy …\nMaximum number of errors before stopping.\nPrint a single diagnostic with pretty formatting.\nPrint diagnostics to stderr with pretty formatting.\nSuggest a similar name from available names using fuzzy …\nGet the symbol/icon for this diagnostic level.\nEnable colored output.\nTreat warnings as errors.\nWarning level: all, default, none.\nCreate a new warning diagnostic.\nGet warning count.\nSet an error code for this diagnostic.\nSet the span for this diagnostic.\nSet a suggestion for this diagnostic.\nConfiguration for error printing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPretty-print an effect error with source context.\nPretty-print a parse error with source context.\nPretty-print a type error with source context.\nEnable colored output (respects NO_COLOR environment …")