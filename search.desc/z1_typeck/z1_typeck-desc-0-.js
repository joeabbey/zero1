searchState.loadedDescShard("z1_typeck", 0, "Primitive types\nTyping context for variables, functions, and effects …\nContains the error value\nFunction type (params, return type, effects)\nGeneric type application (e.g., <code>List&lt;T&gt;</code>)\nContains the success value\nPath-based type reference (may be aliased or fully …\nStructural record type (field order independent for …\nSum type / union (variant label to optional payload type)\nInternal representation of types for type checking.\nType environment for tracking type definitions and …\nA warning detected during type checking.\nAdd an effect to the available effects set.\nGet all available effects.\nCheck function call arity and types (public for testing).\nCheck that a call site’s effects are compatible with the …\nType check a complete module and return any errors found.\nType check a complete module.\nCheck structural type equality (public for testing).\nCollect warnings from a module.\nRegister a function with its type signature.\nDefine a type in the current module.\nRegister a variable in the current scope.\nGet a display name for this type (for error messages).\nEnter a nested block scope (inherits everything from …\nCreate a new context inheriting functions and capabilities …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an AST TypeExpr to our internal Type …\nCheck if a capability is granted.\nCheck if an effect is available in the current context.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this type is a primitive type.\nLookup a type by name (handles both local and imported …\nLookup a function’s type signature.\nLookup a variable’s type.\nRegister an import alias.\nRegister an imported type.\nSet the capabilities granted by the module.\nPerform structural equality check for types. Records are …\nConvert an AST TypeExpr to our internal Type …")