searchState.loadedDescShard("z1_ast", 0, "Assignment: <code>x = expr;</code> or <code>obj.field = expr;</code>\nBinary operators\nBinary operation: <code>a + b</code>, <code>x == y</code>\nBlock of statements (function body or control flow body)\nFunction call: <code>foo(a, b)</code>\nElse block can be another block or another if statement …\nExpressions\nExpression statement: <code>expr;</code>\nField access: <code>obj.field</code>\nIdentifier: <code>x</code>\nIf statement: <code>if cond { ... } else { ... }</code>\nLet binding: <code>let x: Type = expr;</code> or <code>let mut x = expr;</code>\nLiteral values\nLiteral value: <code>42</code>, <code>&quot;hello&quot;</code>, <code>true</code>\nParsed module representation (header + top-level items).\nFully-qualified module path, e.g., <code>http.server</code>.\nParenthesized expression: <code>(expr)</code>\nQualified path: <code>H.Req</code>, <code>std.io.File</code>\nRecord initialization: <code>Point { x: 1, y: 2 }</code>\nRecord field initialization in an expression\nReturn statement: <code>return expr;</code> or <code>return;</code>\nByte-offset span within a source string.\nStatement types\nUnary operators\nUnary operation: <code>-x</code>, <code>!flag</code>, <code>await task</code>\nWhile loop: <code>while cond { ... }</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRaw source text captured during parsing (temporary until …\nParsed statements (may be empty until statement parsing is …")