searchState.loadedDescShard("z1_ir", 0, "Zero1 Intermediate Representation (IR)\nIR Module - compiled representation of a Z1 cell\nError type for IR lowering\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert Z1 AST to IR\nIR optimization passes\nNo optimizations (for debugging)\nBasic optimizations (constant folding, simple DCE)\nAggressive optimizations (all passes, multiple iterations)\nOptimization level\nStatistics about applied optimizations\nConstant folding and propagation optimization pass\nDead Code Elimination (DCE) optimization pass\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction inlining optimization pass\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptimizes an IR module at the specified optimization level\nReturns total number of optimizations applied\nPerforms constant folding on an IR module\nPerforms dead code elimination on an IR module\nConfiguration for inlining heuristics\nAlways inline functions smaller than this\nReturns the argument unchanged.\nPerforms function inlining on an IR module\nPerforms function inlining with custom configuration\nCalls <code>U::from(self)</code>.\nMaximum number of statements to consider for inlining")